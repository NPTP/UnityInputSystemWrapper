using System;
using System.Collections.Generic;
using NPTP.InputSystemWrapper.Actions;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.XR;
using Button = UnityEngine.InputSystem.HID.HID.Button;

// ------------------------------------------------------------------------------------------
// This file was automatically generated by InputScriptGenerator. Do not modify it manually.
// ------------------------------------------------------------------------------------------
namespace NPTP.InputSystemWrapper.Generated.Actions
{
    public class UIActions
    {
        internal InputActionMap ActionMap { get; }
        
        public ValueActionWrapper<Vector2> Navigate { get; }
        public ActionWrapper Submit { get; }
        public ActionWrapper Cancel { get; }
        public ValueActionWrapper<Vector2> Point { get; }
        public ValueActionWrapper<float> Click { get; }
        public ValueActionWrapper<Vector2> ScrollWheel { get; }
        public ValueActionWrapper<float> MiddleClick { get; }
        public ValueActionWrapper<float> RightClick { get; }
        public ValueActionWrapper<Vector3> TrackedDevicePosition { get; }
        public ValueActionWrapper<Quaternion> TrackedDeviceOrientation { get; }
        
        private bool enabled;
        
        internal UIActions(InputActionAsset asset, Dictionary<Guid, ActionWrapper> table)
        {
            ActionMap = asset.FindActionMap("UI", throwIfNotFound: true);
            
            Navigate = new (ActionMap.FindAction("Navigate", throwIfNotFound: true), table);
            Submit = new (ActionMap.FindAction("Submit", throwIfNotFound: true), table);
            Cancel = new (ActionMap.FindAction("Cancel", throwIfNotFound: true), table);
            Point = new (ActionMap.FindAction("Point", throwIfNotFound: true), table);
            Click = new (ActionMap.FindAction("Click", throwIfNotFound: true), table);
            ScrollWheel = new (ActionMap.FindAction("ScrollWheel", throwIfNotFound: true), table);
            MiddleClick = new (ActionMap.FindAction("MiddleClick", throwIfNotFound: true), table);
            RightClick = new (ActionMap.FindAction("RightClick", throwIfNotFound: true), table);
            TrackedDevicePosition = new (ActionMap.FindAction("TrackedDevicePosition", throwIfNotFound: true), table);
            TrackedDeviceOrientation = new (ActionMap.FindAction("TrackedDeviceOrientation", throwIfNotFound: true), table);
        }
        
        internal void EnableAndRegisterCallbacks()
        {
            if (enabled)
            {
                return;
            }

            enabled = true;
            ActionMap.Enable();
            
            Navigate.RegisterCallbacks();
            Submit.RegisterCallbacks();
            Cancel.RegisterCallbacks();
            Point.RegisterCallbacks();
            Click.RegisterCallbacks();
            ScrollWheel.RegisterCallbacks();
            MiddleClick.RegisterCallbacks();
            RightClick.RegisterCallbacks();
            TrackedDevicePosition.RegisterCallbacks();
            TrackedDeviceOrientation.RegisterCallbacks();
        }
        
        internal void DisableAndUnregisterCallbacks()
        {
            if (!enabled)
            {
                return;
            }

            enabled = false;
            ActionMap.Disable();

            Navigate.UnregisterCallbacks();
            Submit.UnregisterCallbacks();
            Cancel.UnregisterCallbacks();
            Point.UnregisterCallbacks();
            Click.UnregisterCallbacks();
            ScrollWheel.UnregisterCallbacks();
            MiddleClick.UnregisterCallbacks();
            RightClick.UnregisterCallbacks();
            TrackedDevicePosition.UnregisterCallbacks();
            TrackedDeviceOrientation.UnregisterCallbacks();
        }
    }
}
