using System;
using UnityEngine.InputSystem;

// ------------------------------------------------------------------------
// This file was automatically generated by InputScriptGenerator.
// ------------------------------------------------------------------------
namespace NPTP.InputSystemWrapper.Generated.MapActions
{
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnTrackedDevicePosition(InputAction.CallbackContext context);
        void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
    }
    
    public class UIActions : IUIActions
    {
        private event Action<InputAction.CallbackContext> @_OnNavigate;
        public event Action<InputAction.CallbackContext> @OnNavigate
        {
            add { _OnNavigate -= value; _OnNavigate += value; }
            remove => _OnNavigate -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnSubmit;
        public event Action<InputAction.CallbackContext> @OnSubmit
        {
            add { _OnSubmit -= value; _OnSubmit += value; }
            remove => _OnSubmit -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnCancel;
        public event Action<InputAction.CallbackContext> @OnCancel
        {
            add { _OnCancel -= value; _OnCancel += value; }
            remove => _OnCancel -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnPoint;
        public event Action<InputAction.CallbackContext> @OnPoint
        {
            add { _OnPoint -= value; _OnPoint += value; }
            remove => _OnPoint -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnClick;
        public event Action<InputAction.CallbackContext> @OnClick
        {
            add { _OnClick -= value; _OnClick += value; }
            remove => _OnClick -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnScrollWheel;
        public event Action<InputAction.CallbackContext> @OnScrollWheel
        {
            add { _OnScrollWheel -= value; _OnScrollWheel += value; }
            remove => _OnScrollWheel -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnMiddleClick;
        public event Action<InputAction.CallbackContext> @OnMiddleClick
        {
            add { _OnMiddleClick -= value; _OnMiddleClick += value; }
            remove => _OnMiddleClick -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnRightClick;
        public event Action<InputAction.CallbackContext> @OnRightClick
        {
            add { _OnRightClick -= value; _OnRightClick += value; }
            remove => _OnRightClick -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnTrackedDevicePosition;
        public event Action<InputAction.CallbackContext> @OnTrackedDevicePosition
        {
            add { _OnTrackedDevicePosition -= value; _OnTrackedDevicePosition += value; }
            remove => _OnTrackedDevicePosition -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnTrackedDeviceOrientation;
        public event Action<InputAction.CallbackContext> @OnTrackedDeviceOrientation
        {
            add { _OnTrackedDeviceOrientation -= value; _OnTrackedDeviceOrientation += value; }
            remove => _OnTrackedDeviceOrientation -= value;
        }

        void IUIActions.OnNavigate(InputAction.CallbackContext context) => _OnNavigate?.Invoke(context);
        void IUIActions.OnSubmit(InputAction.CallbackContext context) => _OnSubmit?.Invoke(context);
        void IUIActions.OnCancel(InputAction.CallbackContext context) => _OnCancel?.Invoke(context);
        void IUIActions.OnPoint(InputAction.CallbackContext context) => _OnPoint?.Invoke(context);
        void IUIActions.OnClick(InputAction.CallbackContext context) => _OnClick?.Invoke(context);
        void IUIActions.OnScrollWheel(InputAction.CallbackContext context) => _OnScrollWheel?.Invoke(context);
        void IUIActions.OnMiddleClick(InputAction.CallbackContext context) => _OnMiddleClick?.Invoke(context);
        void IUIActions.OnRightClick(InputAction.CallbackContext context) => _OnRightClick?.Invoke(context);
        void IUIActions.OnTrackedDevicePosition(InputAction.CallbackContext context) => _OnTrackedDevicePosition?.Invoke(context);
        void IUIActions.OnTrackedDeviceOrientation(InputAction.CallbackContext context) => _OnTrackedDeviceOrientation?.Invoke(context);
    }
}
