using System;
using UnityEngine.InputSystem;

// ------------------------------------------------------------------------
// This file was automatically generated by InputScriptGenerator.
// ------------------------------------------------------------------------
namespace NPTP.InputSystemWrapper.Generated.MapActions
{
    public interface IGameplayActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnHyperspace(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    
    public class GameplayActions : IGameplayActions
    {
        private event Action<InputAction.CallbackContext> @_OnThrust;
        public event Action<InputAction.CallbackContext> @OnThrust
        {
            add { _OnThrust -= value; _OnThrust += value; }
            remove => _OnThrust -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnShoot;
        public event Action<InputAction.CallbackContext> @OnShoot
        {
            add { _OnShoot -= value; _OnShoot += value; }
            remove => _OnShoot -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnHyperspace;
        public event Action<InputAction.CallbackContext> @OnHyperspace
        {
            add { _OnHyperspace -= value; _OnHyperspace += value; }
            remove => _OnHyperspace -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnTurn;
        public event Action<InputAction.CallbackContext> @OnTurn
        {
            add { _OnTurn -= value; _OnTurn += value; }
            remove => _OnTurn -= value;
        }

        private event Action<InputAction.CallbackContext> @_OnPause;
        public event Action<InputAction.CallbackContext> @OnPause
        {
            add { _OnPause -= value; _OnPause += value; }
            remove => _OnPause -= value;
        }

        void IGameplayActions.OnThrust(InputAction.CallbackContext context) => _OnThrust?.Invoke(context);
        void IGameplayActions.OnShoot(InputAction.CallbackContext context) => _OnShoot?.Invoke(context);
        void IGameplayActions.OnHyperspace(InputAction.CallbackContext context) => _OnHyperspace?.Invoke(context);
        void IGameplayActions.OnTurn(InputAction.CallbackContext context) => _OnTurn?.Invoke(context);
        void IGameplayActions.OnPause(InputAction.CallbackContext context) => _OnPause?.Invoke(context);
    }
}
