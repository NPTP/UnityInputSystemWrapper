using System.Collections.Generic;
using NPTP.InputSystemWrapper.Generated.MapActions;
using UnityEngine.InputSystem;


// ------------------------------------------------------------------------
// This file was automatically generated by InputScriptGenerator.
// ------------------------------------------------------------------------
namespace NPTP.InputSystemWrapper.Generated.MapCaches
{
    public class UIMapCache
    {
        private readonly List<IUIActions> interfaces = new();

        public InputActionMap ActionMap { get; }
        public void Enable() => ActionMap.Enable();
        public void Disable() => ActionMap.Disable();

        public InputAction Navigate { get; }
        public InputAction Submit { get; }
        public InputAction Cancel { get; }
        public InputAction Point { get; }
        public InputAction Click { get; }
        public InputAction ScrollWheel { get; }
        public InputAction MiddleClick { get; }
        public InputAction RightClick { get; }
        public InputAction TrackedDevicePosition { get; }
        public InputAction TrackedDeviceOrientation { get; }

        public UIMapCache(InputActionAsset asset)
        {
            ActionMap = asset.FindActionMap("UI", throwIfNotFound: true);
            
            Navigate = ActionMap.FindAction("Navigate", throwIfNotFound: true);
            Submit = ActionMap.FindAction("Submit", throwIfNotFound: true);
            Cancel = ActionMap.FindAction("Cancel", throwIfNotFound: true);
            Point = ActionMap.FindAction("Point", throwIfNotFound: true);
            Click = ActionMap.FindAction("Click", throwIfNotFound: true);
            ScrollWheel = ActionMap.FindAction("ScrollWheel", throwIfNotFound: true);
            MiddleClick = ActionMap.FindAction("MiddleClick", throwIfNotFound: true);
            RightClick = ActionMap.FindAction("RightClick", throwIfNotFound: true);
            TrackedDevicePosition = ActionMap.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            TrackedDeviceOrientation = ActionMap.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
        }

        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || interfaces.Contains(instance))
            {
                return;
            }
            
            interfaces.Add(instance);
            
            Navigate.started += instance.OnNavigate;
            Navigate.performed += instance.OnNavigate;
            Navigate.canceled += instance.OnNavigate;
            Submit.started += instance.OnSubmit;
            Submit.performed += instance.OnSubmit;
            Submit.canceled += instance.OnSubmit;
            Cancel.started += instance.OnCancel;
            Cancel.performed += instance.OnCancel;
            Cancel.canceled += instance.OnCancel;
            Point.started += instance.OnPoint;
            Point.performed += instance.OnPoint;
            Point.canceled += instance.OnPoint;
            Click.started += instance.OnClick;
            Click.performed += instance.OnClick;
            Click.canceled += instance.OnClick;
            ScrollWheel.started += instance.OnScrollWheel;
            ScrollWheel.performed += instance.OnScrollWheel;
            ScrollWheel.canceled += instance.OnScrollWheel;
            MiddleClick.started += instance.OnMiddleClick;
            MiddleClick.performed += instance.OnMiddleClick;
            MiddleClick.canceled += instance.OnMiddleClick;
            RightClick.started += instance.OnRightClick;
            RightClick.performed += instance.OnRightClick;
            RightClick.canceled += instance.OnRightClick;
            TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
            TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
            TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
            TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
            TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
            TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (!interfaces.Remove(instance))
            {
                return;
            }

            Navigate.started -= instance.OnNavigate;
            Navigate.performed -= instance.OnNavigate;
            Navigate.canceled -= instance.OnNavigate;
            Submit.started -= instance.OnSubmit;
            Submit.performed -= instance.OnSubmit;
            Submit.canceled -= instance.OnSubmit;
            Cancel.started -= instance.OnCancel;
            Cancel.performed -= instance.OnCancel;
            Cancel.canceled -= instance.OnCancel;
            Point.started -= instance.OnPoint;
            Point.performed -= instance.OnPoint;
            Point.canceled -= instance.OnPoint;
            Click.started -= instance.OnClick;
            Click.performed -= instance.OnClick;
            Click.canceled -= instance.OnClick;
            ScrollWheel.started -= instance.OnScrollWheel;
            ScrollWheel.performed -= instance.OnScrollWheel;
            ScrollWheel.canceled -= instance.OnScrollWheel;
            MiddleClick.started -= instance.OnMiddleClick;
            MiddleClick.performed -= instance.OnMiddleClick;
            MiddleClick.canceled -= instance.OnMiddleClick;
            RightClick.started -= instance.OnRightClick;
            RightClick.performed -= instance.OnRightClick;
            RightClick.canceled -= instance.OnRightClick;
            TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
            TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
            TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
            TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
            TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
            TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
        }
    }
}
